@page
@model RadPdfCoreDemo.Pages.BasicModel

@using RadPdf.Web.UI;

@*
    To use the Client API, the following code must be in the <head> element of your View's HTML:
    @Html.Raw(RadPdf.Web.UI.PdfWebControl.RenderHead())

    See: /Pages/Shared/_Layout.cshtml
*@

@{
    ViewData["Title"] = "Customized Example";

	const string PdfWebControlID = "PdfWebControl1";

	// Get web control from ViewBag
	PdfWebControl pdfWebControl1 = ViewBag.PdfWebControl1;

	// Set control's properties
	pdfWebControl1.ID = PdfWebControlID;
	pdfWebControl1.Height = "600px";
	pdfWebControl1.Width = "100%";
	pdfWebControl1.OnClientLoad = "initRadPdf();";
	pdfWebControl1.HideBookmarks = true;
	pdfWebControl1.HideBottomBar = true;
	pdfWebControl1.HideDownloadButton = true;
	pdfWebControl1.HideObjectPropertiesBar = true;
	pdfWebControl1.HideSearchText = true;
	pdfWebControl1.HideSideBar = true;
	pdfWebControl1.HideThumbnails = true;
	pdfWebControl1.HideToolsTabs = true;
	pdfWebControl1.HideTopBar = true;
	pdfWebControl1.ViewerPageLayoutDefault = ViewerPageLayout.SinglePageContinuous;
}

<h2>Customized</h2>

<script type="text/javascript">
	var api = null;
	var isDownload = false;

	function showViewInformation(view)
	{
		// Show page information
		document.getElementById("pageInformation").innerHTML = "Page " + view.page + " of " + api.getPageCount();
	}

	function initRadPdf()
	{
		// Get id
		var id = "@Html.Encode(PdfWebControlID)";

		// Get api instance
		api = new PdfWebControlApi(id);

		// Attach listeners
		api.addEventListener(
			"viewChanged",
			function(evt) {
				// Show new view information
				showViewInformation(evt.view);
			}
			);
		api.addEventListener(
			"printing",
			function(evt) {
				// To cancel printing, we would return false or set evt.cancel = true
				return true;
			}
			);
		api.addEventListener(
			"saved",
			function(evt) {
				// We don't want to show this prompt if we initiated a download
				if (!isDownload) {
					window.alert("Save completed.");
				}
			}
			);

		// Initially show view information
		showViewInformation(api.getView());
	}

	// Additional Code Samples
	function fillOutForm()
	{
		if(api)
		{
			// Get text fields
			var fFirstName = api.getField("First Name");
			var fLastName = api.getField("Last Name");
			var fCreditCardNumber = api.getField("Credit Card Number");
			// Set text values (if the field was found)
			if( fFirstName )
			{
				fFirstName.setProperties( { "value" : "John" } );
			}
			if( fLastName )
			{
				fLastName.setProperties( { "value" : "Smith" } );
			}
			if( fCreditCardNumber )
			{
				fCreditCardNumber.setProperties( { "value" : "5555555555554444" } );
			}

			// Get radio fields
			var fProductTypes = api.getFields("Product Type");
			// Set radio field
			if( fProductTypes )
			{
				// Find and check field with the export value "1"
				for( var i = 0; i < fProductTypes.length; i++ )
				{
					if( fProductTypes[i].getProperties()["exportValue"] == "1" )
					{
						fProductTypes[i].setProperties( { "checked" : true } );
					}
				}
			}

			// Get checkbox field
			var fProductSupport = api.getField("Product Support");
			// Set checkbox field
			if( fProductSupport )
			{
				fProductSupport.setProperties( { "checked" : true } );
			}

			// Get combo field
			var fCardType = api.getField("Card Type");
			// Set combo field
			if( fCardType )
			{
				fCardType.setProperties( { "value" : "MasterCard" } );
			}

			// Get list field
			var fProductOptions = api.getField("Product Options");
			// Set combo field
			if( fProductOptions )
			{
				fProductOptions.setProperties( { "value" : "With PDF Extension" } );
			}
		}
	}
	function watermarkPages()
	{
		if(api)
		{
			//Loop through all pages
			for( var i = 1; i <= api.getPageCount(); i++ )
			{
				//Get page
				var p = api.getPage(i);

				//Add watermark object
				var obj = p.addObject(api.ObjectType.TextShape, 0, 50, p.getWidth(), 120);

				//Set watermark properties
				obj.setProperties(
					{
					"text" : "WATERMARK",
					"opacity" : 50,
					"font" :
						{
						"name" : "Arial",
						"alignment" : api.HorizontalAlignmentType.AlignCenter,
						"color" : "#ff0000",
						"size" : 110,
						"bold" : true,
						"italic" : false,
						"underline" : false
						},
					"changeable" : false,
					"deletable" : false,
					"duplicatable" : false,
					"hideFocusOutline" : true,
					"movable" : false,
					"resizable" : false,
					"stylable" : false
					} );
			}
		}
	}
	function zoomTo75()
	{
		if(api)
		{
			api.setView( { "zoom" : 75 } );
		}
	}
</script>

<table cellpadding="2" cellspacing="0" width="100%">
    <thead>
        <tr style="font-size:1.2em;">
            <td width="33%">File Operations</td>
            <td width="33%">Activate Tools</td>
            <td width="33%">Additional Samples</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <button onclick="if(api){isDownload=false;api.save();}return false;">Save</button><br />
                <button onclick="if(api){isDownload=true;api.download();}return false;">Download</button><br />
                <button onclick="if(api){api.print();}return false;">Print</button><br />
            </td>
            <td>
                <button onclick="if(api){api.setMode(api.Mode.InsertTextShape);}return false;">Text Tool</button><br />
                <button onclick="if(api){api.setMode(api.Mode.SelectText);}return false;">Select Text Tool</button><br />
                <button onclick="if(api){api.setMode(api.Mode.CropPage);}return false;">Crop Page Tool</button><br />
            </td>
            <td>
                <button onclick="fillOutForm();return false;">Fill Out Form</button><br />
                <button onclick="watermarkPages();return false;">Watermark Pages</button><br />
                <button onclick="zoomTo75();return false;">Zoom to 75%</button><br />
            </td>
        </tr>
    </tbody>
</table>
<div>
    @* Render web control to body *@
    @Html.Raw(pdfWebControl1.RenderControl())
</div>
<div style="text-align:center;">
    <button onclick="if(api){api.setView( { 'page' : api.getView().page - 1 } );}return false;">Previous Page</button>
    <span id="pageInformation" style="padding:0px 5px;"></span>
    <button onclick="if(api){api.setView( { 'page' : api.getView().page + 1 } );}return false;">Next Page</button>
</div>

